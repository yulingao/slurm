#!/usr/bin/env expect
############################################################################
# Purpose: Test of Slurm functionality
#          Test job handling on Prolog failure (uses SPANK plugin)
#
# Output:  "TEST: #.#" followed by "SUCCESS" if test was successful, OR
#          "FAILURE: ..." otherwise with an explanation of the failure, OR
#          anything else indicates a failure mode that must be investigated.
############################################################################
# Copyright (C) 2019 SchedMD LLC.
# Copyright (C) 2008-2009 Lawrence Livermore National Security.
# Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
# Written by Morris Jette <jette1@llnl.gov>
# CODE-OCEC-09-009. All rights reserved.
#
# This file is part of Slurm, a resource management program.
# For details, see <https://slurm.schedmd.com/>.
# Please also read the included file: DISCLAIMER.
#
# Slurm is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# Slurm is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along
# with Slurm; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.
############################################################################
source ./globals

set test_id	    "7.22"
set cwd		    "[$bin_pwd]"
set exit_code	    0
set file_in         "${cwd}/test${test_id}.in"
set file_out	    "${cwd}/test${test_id}.out"
set file_prog	    "${cwd}/test${test_id}.prog"
set job_id1         0
set job_id2         0
set orig_spank_conf "${cwd}/test${test_id}.orig_conf"
set new_spank_conf  "${cwd}/test${test_id}.new_conf"
set spank_out       "${cwd}/test${test_id}.spank.out"

print_header $test_id

if {[test_super_user] == 0} {
	send_user "\nWARNING: This test must be run as SlurmUser\n"
	exit 0
}
if {[test_front_end]} {
	send_user "\nWARNING: This test is incompatible with front-end systems\n"
	exit $exit_code
}

proc end_it { exit_code } {
	global test_id orig_spank_conf spank_conf_file new_spank_conf spank_out
	global file_out spank_out bin_cp bin_rm file_in file_prog
	global job_id1 job_id2 scontrol alpha_numeric_under

	cancel_job $job_id1
	cancel_job $job_id2

	#
	# Restore the original plugstack
	#
	if {[file exists $orig_spank_conf]} {
		exec $bin_cp -f $orig_spank_conf $spank_conf_file
	} else {
		exec $bin_rm -f $spank_conf_file
	}
	reconfigure

	#
	# Restore node to service after Prolog failure that we triggered
	#
	if {$job_id1 != 0} {
		set batch_host 0
		spawn $scontrol show job $job_id1
		expect {
			-re "BatchHost=($alpha_numeric_under)" {
				set batch_host $expect_out(1,string)
				exp_continue
			}
			eof {
				wait
			}
		}
		if {$batch_host != 0} {
			exec $scontrol update NodeName=$batch_host State=resume
		}
	}

	if {$exit_code == 0} {
		exec $bin_rm -f $orig_spank_conf $new_spank_conf $file_in $file_out $spank_out ${file_prog}.so
		print_success $test_id
	}

	exit $exit_code
}

#
# Build the plugin
#
exec $bin_rm -f ${file_prog}.so
exec $bin_cc -fPIC -shared -I${slurm_dir}/include -o ${file_prog}.so ${file_prog}.c

#
# Locate slurm.conf's directory, copy the original plugstack.conf file
# and create an updated one using our new plugin
#
log_user 0
set config_dir ""
set ctld_slurm_ver ""
spawn $scontrol show config
expect {
	-re "SLURM_CONF.*= (.*)/slurm.conf.*SLURM_VERSION *= ($float)" {
		set config_dir $expect_out(1,string)
		set ctld_slurm_ver $expect_out(2,string)
		exp_continue
	}
	eof {
		wait
	}
}
log_user 1
if {[string compare $config_dir ""] == 0} {
	send_user "\nFAILURE: Could not locate slurm.conf directory\n"
	exit 1
}

log_user 0
set loc_slurm_ver ""
spawn $scontrol -V
expect {
	-re "slurm ($float)" {
		set loc_slurm_ver $expect_out(1,string)
		exp_continue
	}
	eof {
		wait
	}
}
log_user 1

if {[string compare $ctld_slurm_ver $loc_slurm_ver]} {
	send_user "\nWARNING: slurmctld ($ctld_slurm_ver) and local Slurm ($loc_slurm_ver) versions are not the same, can not continue.\n"
	exit 0
}

set spank_conf_file ${config_dir}/plugstack.conf
exec $bin_rm -f $orig_spank_conf $new_spank_conf $file_out $spank_out
if {[file exists $spank_conf_file]} {
	spawn $bin_cat $spank_conf_file
	expect {
		-re "test${test_id}" {
			send_user "\nFAILURE: spank plugin includes vestigial test${test_id}\n"
			send_user "   You probably should manually remove it from $spank_conf_file\n"
			send_user "   It was probably left over from some previous test failure.\n"
			exit 1
		}
		eof {
			wait
		}
	}

	exec $bin_cp -f $spank_conf_file $orig_spank_conf
	exec $bin_cp -f $spank_conf_file $new_spank_conf
} else {
	exec $bin_cp -f /dev/null $new_spank_conf
}

exec $bin_echo "required ${file_prog}.so ${spank_out}" >>$new_spank_conf
spawn $bin_cp -f $new_spank_conf $spank_conf_file
expect {
	-re "Permission denied" {
		send_user "\nWARNING: User lacks permission to update plugstack_conf file\n"
		exit 0
	}
	eof {
		wait
	}
}
reconfigure

#
# Test of locally logged messages().
# Add sleep for NFS delays in propagating $spank_conf_file
#
# NOTE: This test will fail if plugstack.conf is not in a shared location
#	The login node (where test is started) will modify the file and the
#	slurmd/slurmstepd on the compute node will not get the updated
#	configuration.
#
send_user "\n\nTest locally logged messages..........\n\n"

send_user "Checksum of local $spank_conf_file\n"
spawn $bin_sum $spank_conf_file
expect {
	-re timeout {
		send_user "\nFAILURE: sum not responding\n"
		end_it 1
	}
	eof {
		wait
	}
}
send_user "\n\n"

$bin_sleep 30
make_bash_script $file_in "echo TEST_RUN"

spawn $sbatch --test_suite_prolog=0 -N1 -t1 -o /dev/null $file_in
expect {
	-re "Submitted batch job ($number)" {
		set job_id1 $expect_out(1,string)
		exp_continue
	}
	-re timeout {
		send_user "\nFAILURE: sbatch not responding\n"
		end_it 1
	}
	eof {
		wait
	}
}
if {$job_id1 == 0} {
	send_user "\nFAILURE: batch submit failure\n"
	end_it 1
}

spawn $sbatch -N1 -t1 -o $file_out $file_in
expect {
	-re "Submitted batch job ($number)" {
		set job_id2 $expect_out(1,string)
		exp_continue
	}
	-re timeout {
		send_user "\nFAILURE: sbatch not responding\n"
		cancel_job $job_id1
		end_it 1
	}
	eof {
		wait
	}
}
if {$job_id2 == 0} {
	send_user "\nFAILURE: batch submit failure\n"
	end_it 1
}

#
# Wait for second job to complete and check for files
#
if {[wait_for_job $job_id2 "DONE"] != 0} {
	send_user "\nFAILURE: waiting for job $job_id2 to complete\n"
	end_it 1
}

if {[wait_for_file $file_out] == 0} {
	set matches 0
	spawn $bin_cat $file_out
	expect {
		-re "TEST_RUN" {
			incr matches
			exp_continue
		}
		eof {
			wait
		}
	}
	if {$matches != 1} {
		send_user "\nFAILURE: job run failure ($matches != 1)\n"
		end_it 1
	}
} else {
	end_it 1
}

set matches 0
spawn $scontrol show job $job_id1
expect {
	-re "Priority=0" {
		incr matches
		exp_continue
	}
	-re "JobState=PENDING" {
		incr matches
		exp_continue
	}
	-re "Reason=launch_failed_requeued_held" {
		incr matches
		exp_continue
	}
	eof {
		wait
	}
}
if {$matches != 3} {
	send_user "\nFAILURE: job requeue/hold failure ($matches != 3)\n"
	end_it 1
}

end_it $exit_code
